library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Memory is
Port
(
    clk : in std_logic;

    ESPCLK  : in std_logic;
    ESPData : in std_logic_vector(7 downto 0);
    wEnable : in std_logic;

    rCLK        : in std_logic;
    rData       : out std_logic_vector(7 downto 0);
    rAddress    : in std_logic_vector(7 downto 0);
    rEnable     : in std_logic
);
end Memory;

architecture Behavioral of Memory is
    constant maxBits : POSITIVE := 10;

    signal ESPDataMeta, ESPDataStable : std_logic_vector(7 downto 0);
    signal ESPClkMeta, ESPClkNew, ESPClkOld : std_logic;

    signal count : integer range 0 to 255;

    TYPE ImageArray IS ARRAY (0 to 255) of STD_LOGIC_VECTOR(7 downto 0);
    signal imageData : ImageArray :=
    (
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000",
        "00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000","00000000"
    );
begin

clock_boundry : process(clk)
begin
    if rising_edge(clk) then
        ESPDataMeta     <= ESPData;
        ESPDataStable   <= ESPDataMeta;

        ESPClkMeta  <= ESPClk;
        ESPClkNew   <= ESPClkMeta;
        ESPClkOld   <= ESPClkNew;
    end if;
end process;

read_ESP : process(clk)
begin
    if rising_edge(clk) then
        if (ESPClkOld = '1' and ESPClkNew = '0') then
            if (count < 256) then
                imageData(count) <= ESPData;
                count <= count + 1;
            end if;
        end if;
    end if;
end process;

end Behavioral;
